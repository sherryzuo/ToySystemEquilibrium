---
title: "ToySystemEquilibrium Diagnostic Analysis"
format:
  html:
    code-fold: true
    toc: true
    toc-depth: 3
    theme: cerulean
engine: julia
---

# System Diagnostic Analysis

This notebook provides comprehensive diagnostic analysis of the ToySystemEquilibrium model, including complete test system execution and fixed point validation.

## User Configuration Parameters

Set your system parameters below:

```{julia}
# System Parameters Configuration
# Modify these values as needed for your analysis

# Time horizon
hours = 720        # Total hours to simulate
days = 30          # Number of days (should match hours/24)

# System configuration
N = 1             # Number of generators per technology fleet
random_seed = 42   # Random seed for reproducibility

# Economic parameters
load_shed_penalty = 10000.0  # Load shedding penalty ($/MWh)
load_shed_quad = 0.001       # Quadratic load shedding penalty

println("Configuration:")
println("  Time horizon: $hours hours ($days days)")
println("  Generators per fleet: $N")
println("  Random seed: $random_seed")
println("  Load shed penalty: \$$(load_shed_penalty)/MWh")
println("  Load shed quadratic: $load_shed_quad")
```

## Load Required Modules

```{julia}
using Revise
using ToySystemQuad
using Plots
using CSV
using DataFrames

# Set plotting backend
gr()
```

## Part 1: Complete Test System Analysis

### Execute Complete Test System

```{julia}
# Configure system parameters using user inputs
params = SystemParameters(
    hours,
    days,
    N,
    random_seed,
    load_shed_penalty,
    load_shed_quad
)

println("Starting Complete ToySystemQuad Test System with configured parameters...")
println("This will run all three optimization models:")
println("  - Capacity Expansion Model (CEM)")
println("  - Perfect Foresight Operations")  
println("  - DLAC-i Operations (5 stochastic scenarios)")
println()

# Run the complete test system
results = run_complete_test_system(params=params, output_dir="results")

# Display results summary
if results["status"] == "success"
    println("✅ SUCCESS: All models completed successfully!")
    println("\nKey Results Summary:")
    println("- Capacity Expansion: \$$(round(results["cem"]["total_cost"]/1e6, digits=2))M total cost")
    println("- Perfect Foresight: \$$(round(results["perfect_foresight"]["total_cost"]/1e3, digits=0))k operational cost")  
    println("- DLAC-i Operations: \$$(round(results["dlac_i"]["total_cost"]/1e3, digits=0))k operational cost")
else
    println("❌ FAILURE: Test failed at stage $(results["stage"])")
    println("Check error details above")
end
```

### Results Summary

```{julia}
# Display summary of generated files
if results["status"] == "success"
    println("✅ All results files generated successfully in results/ directory")
    
    # Check for key files
    key_files = [
        "results/capacity_expansion_operations.csv",
        "results/perfect_foresight_operations.csv", 
        "results/dlac_i_operations.csv",
        "results/three_model_comprehensive_comparison.csv"
    ]
    
    for file in key_files
        if isfile(file)
            println("  ✅ $(basename(file))")
        else
            println("  ❌ $(basename(file)) - MISSING")
        end
    end
else
    println("❌ Test system execution failed")
end
```

## Part 2: Comprehensive Diagnostic Plots

All plots are automatically generated by `run_complete_test_system()` and saved to `results/plots/`. Below we display the generated plots:

### Price Duration Curves

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/price_duration_curves.png")
    println("✅ Price duration curves plot available")
else
    println("❌ Price duration curves plot not found")
end
```

![Price Duration Curves](results/plots/price_duration_curves.png)

### Generation Stacks Comparison

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/generation_stacks.png")
    println("✅ Generation stacks plot available")
else
    println("❌ Generation stacks plot not found")
end
```

![Generation Stacks](results/plots/generation_stacks.png)

### Battery Operations Analysis

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/battery_operations.png")
    println("✅ Battery operations plot available")
else
    println("❌ Battery operations plot not found")
end
```

![Battery Operations](results/plots/battery_operations.png)

### Battery State of Charge Comparison

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/battery_soc_comparison.png")
    println("✅ Battery SOC comparison plot available")
else
    println("❌ Battery SOC comparison plot not found")
end
```

![Battery SOC Comparison](results/plots/battery_soc_comparison.png)

### System Profiles

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/system_profiles.png")
    println("✅ System profiles plot available")
else
    println("❌ System profiles plot not found")
end
```

![System Profiles](results/plots/system_profiles.png)

### Capacity Comparison

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/capacity_comparison.png")
    println("✅ Capacity comparison plot available")
else
    println("❌ Capacity comparison plot not found")
end
```

![Capacity Comparison](results/plots/capacity_comparison.png)

### Comprehensive Price Analysis

```{julia}
#| echo: false
if results["status"] == "success" && isfile("results/plots/comprehensive_price_analysis.png")
    println("✅ Comprehensive price analysis plot available")
else
    println("❌ Comprehensive price analysis plot not found")
end
```

![Comprehensive Price Analysis](results/plots/comprehensive_price_analysis.png)

## Part 3: Fixed Point Validation Analysis

### Validation Test 1: All Generators Active

```{julia}
println("="^100)
println("FIXED-POINT VALIDATION TEST 1: ALL GENERATORS ACTIVE")
println("Testing if PF equilibrium from zero capacities matches CEM solution")
println("="^100)

# Create system components
generators, battery, profiles = create_complete_toy_system(params)

println("System configured:")
println("  - $(params.hours)-hour horizon ($(params.days) days)")
println("  - $(length(generators)) generator types")

# =============================================================================
# STEP 1: Solve CEM (benchmark solution)
# =============================================================================
println("\n" * "="^80)
println("STEP 1: Solving Capacity Expansion Model (CEM)")
println("="^80)

cem_result = solve_capacity_expansion_model(generators, battery, profiles)

if cem_result["status"] != "optimal"
    println("ERROR: CEM failed to solve optimally")
else
    cem_capacities = cem_result["capacity"]
    cem_battery_power = cem_result["battery_power_cap"]
    cem_battery_energy = cem_result["battery_energy_cap"]
    cem_total_cost = cem_result["total_cost"]
    
    println("CEM Solution:")
    for (i, gen) in enumerate(generators)
        println("  $(gen.name): $(round(cem_capacities[i], digits=1)) MW")
    end
    println("  Battery Power: $(round(cem_battery_power, digits=1)) MW")
    println("  Battery Energy: $(round(cem_battery_energy, digits=1)) MWh")
    println("  Total Cost: \$$(round(cem_total_cost, digits=0))")
    
    # =============================================================================
    # STEP 2: Run PF equilibrium from zero capacities (ALL GENERATORS ACTIVE)
    # =============================================================================
    println("\n" * "="^80)
    println("STEP 2: Running Perfect Foresight Equilibrium - ALL GENERATORS ACTIVE")
    println("="^80)
    
    # Start with realistic initial capacities
    zero_capacities = fill(500.0, length(generators))
    zero_battery_power = 100.0
    zero_battery_energy = 400.0
    
    println("Starting capacities:")
    for (i, gen) in enumerate(generators)
        println("  $(gen.name): $(zero_capacities[i]) MW")
    end
    println("  Battery Power: $(zero_battery_power) MW")
    println("  Battery Energy: $(zero_battery_energy) MWh")
    
    # Equilibrium parameters with all generators active
    equilibrium_params_all = EquilibriumParameters(
        max_iterations = 1000,    
        tolerance = 1e-2,       
        step_size = 0.5,        
        smoothing_beta = 5.0,   
        min_capacity_threshold = 1e-6,
        update_generators = [true, true, true],  # All generators active
        update_battery = true                    # Battery active
    )
    
    println("\nEquilibrium parameters (ALL ACTIVE):")
    println("  Max iterations: $(equilibrium_params_all.max_iterations)")
    println("  Tolerance: $(equilibrium_params_all.tolerance)")
    println("  Step size: $(equilibrium_params_all.step_size)")
    println("  Update generators: $(equilibrium_params_all.update_generators)")
    println("  Update battery: $(equilibrium_params_all.update_battery)")
    
    # Run equilibrium with Perfect Foresight - all generators
    equilibrium_result_all = run_policy_equilibrium(
        generators, battery, zero_capacities, zero_battery_power, zero_battery_energy, 
        profiles, PerfectForesight;
        equilibrium_params = equilibrium_params_all,
        base_output_dir = "results/validation_pf_all_generators"
    )
    
    if equilibrium_result_all["converged"]
        println("\n✅ Equilibrium CONVERGED (all generators active)")
        println("Final capacities:")
        for (i, gen) in enumerate(generators)
            println("  $(gen.name): $(round(equilibrium_result_all["final_capacities"][i], digits=1)) MW")
        end
        println("  Battery Power: $(round(equilibrium_result_all["final_battery_power"], digits=1)) MW")
        println("  Battery Energy: $(round(equilibrium_result_all["final_battery_energy"], digits=1)) MWh")
        println("  Final cost: \$$(round(equilibrium_result_all["final_cost"], digits=0))")
        println("  Iterations: $(equilibrium_result_all["iterations"])")
    else
        println("\n❌ Equilibrium did NOT converge (all generators active)")
        println("  Iterations: $(equilibrium_result_all["iterations"])")
        println("  Final max PMR: $(round(equilibrium_result_all["final_max_pmr"], digits=4))")
    end
end
```

### Validation Test 2: Only Gas Generator Active (Frozen Battery)

```{julia}
println("\n" * "="^100)
println("FIXED-POINT VALIDATION TEST 2: ONLY GAS GENERATOR ACTIVE (FROZEN BATTERY)")
println("Testing selective updating with only Gas generator active")
println("="^100)

if cem_result["status"] == "optimal"
    # =============================================================================
    # STEP 3: Run PF equilibrium with only Gas generator active
    # =============================================================================
    println("\n" * "="^80)
    println("STEP 3: Running Perfect Foresight Equilibrium - ONLY GAS ACTIVE")
    println("="^80)
    
    # Start with same initial capacities
    zero_capacities_gas = fill(500.0, length(generators))
    zero_battery_power_gas = 100.0
    zero_battery_energy_gas = 400.0
    
    println("Starting capacities (Gas only active):")
    for (i, gen) in enumerate(generators)
        status = i == 3 ? "(ACTIVE)" : "(FROZEN)"
        println("  $(gen.name): $(zero_capacities_gas[i]) MW $status")
    end
    println("  Battery Power: $(zero_battery_power_gas) MW (FROZEN)")
    println("  Battery Energy: $(zero_battery_energy_gas) MWh (FROZEN)")
    
    # Equilibrium parameters - only Gas generator active, battery frozen
    equilibrium_params_gas = EquilibriumParameters(
        max_iterations = 1000,    
        tolerance = 1e-2,       
        step_size = 0.5,        
        smoothing_beta = 5.0,   
        min_capacity_threshold = 1e-6,
        update_generators = [false, false, true],  # Only Gas (index 3) active
        update_battery = false                     # Battery frozen
    )
    
    println("\nEquilibrium parameters (GAS ONLY):")
    println("  Max iterations: $(equilibrium_params_gas.max_iterations)")
    println("  Tolerance: $(equilibrium_params_gas.tolerance)")
    println("  Step size: $(equilibrium_params_gas.step_size)")
    println("  Update generators: $(equilibrium_params_gas.update_generators)")
    println("  Update battery: $(equilibrium_params_gas.update_battery)")
    
    # Run equilibrium with Perfect Foresight - Gas only
    equilibrium_result_gas = run_policy_equilibrium(
        generators, battery, zero_capacities_gas, zero_battery_power_gas, zero_battery_energy_gas, 
        profiles, PerfectForesight;
        equilibrium_params = equilibrium_params_gas,
        base_output_dir = "results/validation_pf_gas_only"
    )
    
    if equilibrium_result_gas["converged"]
        println("\n✅ Equilibrium CONVERGED (Gas only active)")
        println("Final capacities:")
        for (i, gen) in enumerate(generators)
            status = i == 3 ? "(UPDATED)" : "(FROZEN)"
            println("  $(gen.name): $(round(equilibrium_result_gas["final_capacities"][i], digits=1)) MW $status")
        end
        println("  Battery Power: $(round(equilibrium_result_gas["final_battery_power"], digits=1)) MW (FROZEN)")
        println("  Battery Energy: $(round(equilibrium_result_gas["final_battery_energy"], digits=1)) MWh (FROZEN)")
        println("  Final cost: \$$(round(equilibrium_result_gas["final_cost"], digits=0))")
        println("  Iterations: $(equilibrium_result_gas["iterations"])")
    else
        println("\n❌ Equilibrium did NOT converge (Gas only active)")
        println("  Iterations: $(equilibrium_result_gas["iterations"])")
        println("  Final max PMR: $(round(equilibrium_result_gas["final_max_pmr"], digits=4))")
    end
end
```

### Validation Test 3: DLAC-i Equilibrium Analysis

```{julia}
println("\n" * "="^100)
println("FIXED-POINT VALIDATION TEST 3: DLAC-i EQUILIBRIUM")
println("Testing equilibrium convergence using DLAC-i policy (rolling horizon with scenarios)")
println("="^100)

if cem_result["status"] == "optimal"
    # =============================================================================
    # STEP 4: Run DLAC-i equilibrium from initial capacities
    # =============================================================================
    println("\n" * "="^80)
    println("STEP 4: Running DLAC-i Equilibrium from Initial Capacities")
    println("="^80)
    
    # Start with realistic initial capacities
    dlac_capacities = fill(500.0, length(generators))
    dlac_battery_power = 100.0
    dlac_battery_energy = 400.0
    
    println("Starting capacities for DLAC-i:")
    for (i, gen) in enumerate(generators)
        println("  $(gen.name): $(dlac_capacities[i]) MW")
    end
    println("  Battery Power: $(dlac_battery_power) MW")
    println("  Battery Energy: $(dlac_battery_energy) MWh")
    
    # Equilibrium parameters for DLAC-i - use smaller step size for stability
    equilibrium_params_dlac = EquilibriumParameters(
        max_iterations = 1000,    
        tolerance = 1e-2,       
        step_size = 0.1,        # Smaller step size for DLAC-i stability
        smoothing_beta = 5.0,   
        min_capacity_threshold = 1e-6,
        update_generators = [true, true, true],  # All generators active
        update_battery = true                    # Battery active
    )
    
    println("\nEquilibrium parameters (DLAC-i - ALL ACTIVE):")
    println("  Max iterations: $(equilibrium_params_dlac.max_iterations)")
    println("  Tolerance: $(equilibrium_params_dlac.tolerance)")
    println("  Step size: $(equilibrium_params_dlac.step_size)")
    println("  Update generators: $(equilibrium_params_dlac.update_generators)")
    println("  Update battery: $(equilibrium_params_dlac.update_battery)")
    println("  Policy: DLAC-i (rolling horizon with 5 scenarios)")
    
    # Run equilibrium with DLAC-i policy
    equilibrium_result_dlac = run_policy_equilibrium(
        generators, battery, dlac_capacities, dlac_battery_power, dlac_battery_energy, 
        profiles, DLAC_i;
        equilibrium_params = equilibrium_params_dlac,
        base_output_dir = "results/validation_dlac_all_generators"
    )
    
    if equilibrium_result_dlac["converged"]
        println("\n✅ DLAC-i Equilibrium CONVERGED")
        println("Final capacities:")
        for (i, gen) in enumerate(generators)
            println("  $(gen.name): $(round(equilibrium_result_dlac["final_capacities"][i], digits=1)) MW")
        end
        println("  Battery Power: $(round(equilibrium_result_dlac["final_battery_power"], digits=1)) MW")
        println("  Battery Energy: $(round(equilibrium_result_dlac["final_battery_energy"], digits=1)) MWh")
        println("  Final cost: \$$(round(equilibrium_result_dlac["final_cost"], digits=0))")
        println("  Iterations: $(equilibrium_result_dlac["iterations"])")
        
        # Compare with CEM and PF equilibrium results
        println("\n" * "="^60)
        println("COMPARISON: CEM vs PF-Equilibrium vs DLAC-i-Equilibrium")
        println("="^60)
        
        if @isdefined(equilibrium_result_all) && equilibrium_result_all["converged"]
            println("\nCapacity Comparison:")
            println("Generator | CEM | PF-Equil | DLAC-i-Equil | PF-Diff | DLAC-Diff")
            println("-"^70)
            for (i, gen) in enumerate(generators)
                cem_cap = cem_capacities[i]
                pf_cap = equilibrium_result_all["final_capacities"][i]
                dlac_cap = equilibrium_result_dlac["final_capacities"][i]
                pf_diff = pf_cap - cem_cap
                dlac_diff = dlac_cap - cem_cap
                println("$(lpad(gen.name, 9)) | $(lpad(round(cem_cap, digits=1), 7)) | $(lpad(round(pf_cap, digits=1), 8)) | $(lpad(round(dlac_cap, digits=1), 12)) | $(lpad(round(pf_diff, digits=1), 7)) | $(lpad(round(dlac_diff, digits=1), 9))")
            end
            
            println("\nCost Comparison:")
            pf_cost_diff = equilibrium_result_all["final_cost"] - cem_total_cost
            dlac_cost_diff = equilibrium_result_dlac["final_cost"] - cem_total_cost
            println("CEM Total Cost:        \$$(round(cem_total_cost, digits=0))")
            println("PF-Equilibrium Cost:   \$$(round(equilibrium_result_all["final_cost"], digits=0)) (diff: \$$(round(pf_cost_diff, digits=0)))")
            println("DLAC-i-Equilibrium Cost: \$$(round(equilibrium_result_dlac["final_cost"], digits=0)) (diff: \$$(round(dlac_cost_diff, digits=0)))")
        end
        
    else
        println("\n❌ DLAC-i Equilibrium did NOT converge")
        println("  Iterations: $(equilibrium_result_dlac["iterations"])")
        println("  Final max PMR: $(round(equilibrium_result_dlac["final_max_pmr"], digits=4))")
    end
end
```

## Part 4: Equilibrium Convergence Plots

### Generate Python Plots for All Generators Active

```{julia}
# Generate equilibrium plots for validation test 1 (all generators)
run(`python scripts/equilibrium_plots.py results/validation_pf_all_generators/equilibrium/perfectforesight/equilibrium_log.csv --label "Validation Test 1: PF All Generators Active"`)

println("Generated equilibrium plots for all generators active validation")
```

#### Display PF All Generators Equilibrium Plots

```{julia}
#| echo: false
if isfile("results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png")
    println("✅ PF All Generators equilibrium plots available")
else
    println("❌ PF All Generators equilibrium plots not found")
end
```

**Maximum PMR Evolution:** ![PF All Generators - Max PMR](results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png)

**All PMRs Evolution:** ![PF All Generators - All PMRs](results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_all_pmrs.png)

**Capacity Evolution:** ![PF All Generators - Capacity Evolution](results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_capacity_evolution.png)

**Cost Evolution:** ![PF All Generators - Cost Evolution](results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_cost_evolution.png)

### Generate Python Plots for Gas Only Active

```{julia}
# Generate equilibrium plots for validation test 2 (Gas only)
run(`python scripts/equilibrium_plots.py results/validation_pf_gas_only/equilibrium/perfectforesight/equilibrium_log.csv --label "Validation Test 2: PF Gas Only Active (Frozen Battery)"`)

println("Generated equilibrium plots for Gas only validation")
```

#### Display PF Gas Only Equilibrium Plots

```{julia}
#| echo: false
if isfile("results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png")
    println("✅ PF Gas Only equilibrium plots available")
else
    println("❌ PF Gas Only equilibrium plots not found")
end
```

**Maximum PMR Evolution:** ![PF Gas Only - Max PMR](results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png)

**All PMRs Evolution:** ![PF Gas Only - All PMRs](results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_all_pmrs.png)

**Capacity Evolution:** ![PF Gas Only - Capacity Evolution](results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_capacity_evolution.png)

**Cost Evolution:** ![PF Gas Only - Cost Evolution](results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_cost_evolution.png)

### Generate Python Plots for DLAC-i Equilibrium

```{julia}
# Sort DLAC-i equilibrium log by iteration before plotting
if isfile("results/validation_dlac_all_generators/equilibrium/dlac_i/equilibrium_log.csv")
    dlac_log = CSV.read("results/validation_dlac_all_generators/equilibrium/dlac_i/equilibrium_log.csv", DataFrame)
    dlac_log_sorted = sort(dlac_log, :Iteration)
    CSV.write("results/validation_dlac_all_generators/equilibrium/dlac_i/equilibrium_log_sorted.csv", dlac_log_sorted)
    
    # Generate equilibrium plots using sorted data
    run(`python scripts/equilibrium_plots.py results/validation_dlac_all_generators/equilibrium/dlac_i/equilibrium_log_sorted.csv --label "Validation Test 3: DLAC-i All Generators Active"`)
    
    println("Sorted DLAC-i log by iteration and generated equilibrium plots")
else
    println("DLAC-i equilibrium log not found")
end
```

#### Display DLAC-i All Generators Equilibrium Plots

```{julia}
#| echo: false
if isfile("results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_max_pmr.png")
    println("✅ DLAC-i All Generators equilibrium plots available")
else
    println("❌ DLAC-i All Generators equilibrium plots not found")
end
```

**Maximum PMR Evolution:** ![DLAC-i All Generators - Max PMR](results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_max_pmr.png)

**All PMRs Evolution:** ![DLAC-i All Generators - All PMRs](results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_all_pmrs.png)

**Capacity Evolution:** ![DLAC-i All Generators - Capacity Evolution](results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_capacity_evolution.png)

**Cost Evolution:** ![DLAC-i All Generators - Cost Evolution](results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_cost_evolution.png)
```