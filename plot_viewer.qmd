---
title: "ToySystemEquilibrium Plot Viewer"
format:
  html:
    code-fold: true
    toc: true
    toc-depth: 3
    theme: cerulean
engine: julia
---

# Plot Viewer Dashboard

This notebook displays all generated plots from the ToySystemEquilibrium diagnostic analysis. Use this to quickly review results without re-running computations.

## System Overview Plots

### Check Available Results

```{julia}
using CSV, DataFrames

# Check what results are available
println("Checking for available result files and plots...")
println("="^60)

# Main results files
project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"
main_files = [
    joinpath(project_dir, "results/capacity_expansion_operations.csv"),
    joinpath(project_dir, "results/perfect_foresight_operations.csv"), 
    joinpath(project_dir, "results/dlac_i_operations.csv"),
    joinpath(project_dir, "results/three_model_comprehensive_comparison.csv")
]

println("Main Results Files:")
for file in main_files
    if isfile(file)
        println("  ‚úÖ $(basename(file))")
    else
        println("  ‚ùå $(basename(file)) - MISSING")
    end
end

# Main system plots
main_plots = [
    joinpath(project_dir, "results/plots/price_duration_curves.png"),
    joinpath(project_dir, "results/plots/generation_stacks.png"),
    joinpath(project_dir, "results/plots/battery_operations.png"),
    joinpath(project_dir, "results/plots/battery_soc_comparison.png"),
    joinpath(project_dir, "results/plots/system_profiles.png"),
    joinpath(project_dir, "results/plots/capacity_comparison.png"),
    joinpath(project_dir, "results/plots/comprehensive_price_analysis.png")
]

println("\nMain System Plots:")
for plot in main_plots
    if isfile(plot)
        println("  ‚úÖ $(basename(plot))")
    else
        println("  ‚ùå $(basename(plot)) - MISSING")
    end
end
```

## Part 1: System Analysis Plots

### Price Duration Curves

```{julia}
#| echo: false
project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"
if isfile(joinpath(project_dir, "results/plots/price_duration_curves.png"))
    println("‚úÖ Price duration curves available")
else
    println("‚ùå Price duration curves not found - run diagnostic_analysis.qmd first")
end
```

<img src="results/plots/price_duration_curves.png" alt="Price Duration Curves" width="800"/>

### Generation Stacks Comparison

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/generation_stacks.png"))
    println("‚úÖ Generation stacks available")
else
    println("‚ùå Generation stacks not found")
end
```

<img src="results/plots/generation_stacks.png" alt="Generation Stacks" width="800"/>

### Battery Operations Analysis

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/battery_operations.png"))
    println("‚úÖ Battery operations available")
else
    println("‚ùå Battery operations not found")
end
```

<img src="results/plots/battery_operations.png" alt="Battery Operations" width="800"/>

### Battery State of Charge Comparison

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/battery_soc_comparison.png"))
    println("‚úÖ Battery SOC comparison available")
else
    println("‚ùå Battery SOC comparison not found")
end
```

<img src="results/plots/battery_soc_comparison.png" alt="Battery SOC Comparison" width="800"/>

### System Profiles

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/system_profiles.png"))
    println("‚úÖ System profiles available")
else
    println("‚ùå System profiles not found")
end
```

<img src="results/plots/system_profiles.png" alt="System Profiles" width="800"/>

### Capacity Comparison

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/capacity_comparison.png"))
    println("‚úÖ Capacity comparison available")
else
    println("‚ùå Capacity comparison not found")
end
```

<img src="results/plots/capacity_comparison.png" alt="Capacity Comparison" width="800"/>

### Comprehensive Price Analysis

```{julia}
#| echo: false
if isfile(joinpath(project_dir, "results/plots/comprehensive_price_analysis.png"))
    println("‚úÖ Comprehensive price analysis available")
else
    println("‚ùå Comprehensive price analysis not found")
end
```

<img src="results/plots/comprehensive_price_analysis.png" alt="Comprehensive Price Analysis" width="800"/>

## Part 2: Generate All Validation Plots

### Generate Equilibrium Plots for All Validation Tests

```{julia}
using CSV, DataFrames

# Get absolute path to project directory
project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"

println("Generating all equilibrium validation plots...")
println("="^60)

# Define validation directories and their log files
validation_tests = [
    (
        name = "PF All Generators Active",
        log_path = joinpath(project_dir, "results/validation_pf_all_generators/equilibrium/perfectforesight/equilibrium_log.csv"),
        label = "Validation Test 1: PF All Generators Active"
    ),
    (
        name = "PF Gas Only Active", 
        log_path = joinpath(project_dir, "results/validation_pf_gas_only/equilibrium/perfectforesight/equilibrium_log.csv"),
        label = "Validation Test 2: PF Gas Only Active (Frozen Battery)"
    ),
    (
        name = "DLAC-i All Generators Active",
        log_path = joinpath(project_dir, "results/validation_dlac_all_generators/equilibrium/dlac_i/equilibrium_log.csv"),
        label = "Validation Test 3: DLAC-i All Generators Active",
        needs_sorting = true
    )
]

# Generate plots for each validation test
for test in validation_tests
    println("\nProcessing: $(test.name)")
    
    if isfile(test.log_path)
        println("  ‚úÖ Log file found: $(basename(test.log_path))")
        
        # Handle DLAC-i sorting if needed
        plot_log_path = test.log_path
        if haskey(test, :needs_sorting) && test.needs_sorting
            println("  üìä Sorting DLAC-i log by iteration...")
            dlac_log = CSV.read(test.log_path, DataFrame)
            dlac_log_sorted = sort(dlac_log, :Iteration)
            sorted_path = replace(test.log_path, ".csv" => "_sorted.csv")
            CSV.write(sorted_path, dlac_log_sorted)
            plot_log_path = sorted_path
            println("  ‚úÖ Sorted log saved: $(basename(sorted_path))")
        end
        
        # Read the log to determine iteration range for zoom
        log_data = CSV.read(plot_log_path, DataFrame)
        total_iterations = nrow(log_data)
        
        # Generate full plots
        try
            scripts_path = joinpath(project_dir, "scripts/equilibrium_plots.py")
            cmd = `python $scripts_path $plot_log_path --label "$(test.label)"`
            
            println("  üîÑ Generating full plots...")
            run(cmd)
            println("  ‚úÖ Full plots generated successfully")
            
        catch e
            println("  ‚ùå Error generating full plots: $e")
        end
        
        # Generate zoomed plots (last 20 iterations)
        if total_iterations > 20
            try
                max_iter = maximum(log_data.Iteration)
                # For zoomed plots, we want the last 20 iterations chronologically
                zoom_start = max_iter - 19  # Last 20 iterations
                zoom_end = max_iter
                
                cmd_zoom = `python $scripts_path $plot_log_path --label "$(test.label) - Last 20 Iterations" --start-iter $zoom_start --end-iter $zoom_end`
                
                println("  üîç Generating zoomed plots (iterations $zoom_start to $zoom_end)...")
                run(cmd_zoom)
                println("  ‚úÖ Zoomed plots generated successfully")
                
            catch e
                println("  ‚ùå Error generating zoomed plots: $e")
            end
        else
            println("  ‚ö†Ô∏è  Only $total_iterations iterations available - skipping zoom plots")
        end
        
    else
        println("  ‚ùå Log file not found: $(test.log_path)")
        println("     Run diagnostic_analysis.qmd first to generate validation results")
    end
end

println("\n" * "="^60)
println("Plot generation complete!")
```

### Check Equilibrium Results

```{julia}
# Check for equilibrium validation directories and files
println("Checking equilibrium validation results...")
println("="^60)

project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"
equilibrium_dirs = [
    joinpath(project_dir, "results/validation_pf_all_generators/equilibrium/perfectforesight/"),
    joinpath(project_dir, "results/validation_pf_gas_only/equilibrium/perfectforesight/"),
    joinpath(project_dir, "results/validation_dlac_all_generators/equilibrium/dlac_i/")
]

for dir in equilibrium_dirs
    if isdir(dir)
        log_file = joinpath(dir, "equilibrium_log.csv")
        plots_dir = joinpath(dir, "plots")
        
        println("Directory: $(basename(dirname(dir))) - $(basename(dir))")
        println("  Log file: $(isfile(log_file) ? "‚úÖ" : "‚ùå")")
        println("  Plots dir: $(isdir(plots_dir) ? "‚úÖ" : "‚ùå")")
        
        if isdir(plots_dir)
            plot_files = readdir(plots_dir)
            png_files = filter(f -> endswith(f, ".png"), plot_files)
            println("  PNG files: $(length(png_files))")
        end
        println()
    else
        println("‚ùå Missing: $dir")
    end
end
```

## Perfect Foresight Equilibrium - All Generators Active

### PF All Generators Plots

```{julia}
#| echo: false
pf_all_plots_dir = "results/validation_pf_all_generators/equilibrium/perfectforesight/plots/"
if isdir(pf_all_plots_dir)
    println("‚úÖ PF All Generators equilibrium plots available")
else
    println("‚ùå PF All Generators equilibrium plots not found")
end
```

**Maximum PMR Evolution:** <img src="results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png" alt="PF All Generators - Max PMR" width="800"/>

**All PMRs Evolution:** <img src="results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_all_pmrs.png" alt="PF All Generators - All PMRs" width="800"/>

**Capacity Evolution:** <img src="results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_capacity_evolution.png" alt="PF All Generators - Capacity Evolution" width="800"/>

**Cost Evolution:** <img src="results/validation_pf_all_generators/equilibrium/perfectforesight/plots/equilibrium_log_cost_evolution.png" alt="PF All Generators - Cost Evolution" width="800"/>

## Perfect Foresight Equilibrium - Gas Only Active

### PF Gas Only Plots

```{julia}
#| echo: false
pf_gas_plots_dir = "results/validation_pf_gas_only/equilibrium/perfectforesight/plots/"
if isdir(pf_gas_plots_dir)
    println("‚úÖ PF Gas Only equilibrium plots available")
else
    println("‚ùå PF Gas Only equilibrium plots not found")
end
```

**Maximum PMR Evolution:** <img src="results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_max_pmr.png" alt="PF Gas Only - Max PMR" width="800"/>

**All PMRs Evolution:** <img src="results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_all_pmrs.png" alt="PF Gas Only - All PMRs" width="800"/>

**Capacity Evolution:** <img src="results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_capacity_evolution.png" alt="PF Gas Only - Capacity Evolution" width="800"/>

**Cost Evolution:** <img src="results/validation_pf_gas_only/equilibrium/perfectforesight/plots/equilibrium_log_cost_evolution.png" alt="PF Gas Only - Cost Evolution" width="800"/>

## DLAC-i Equilibrium - All Generators Active

### DLAC-i All Generators Plots

```{julia}
#| echo: false
dlac_plots_dir = "results/validation_dlac_all_generators/equilibrium/dlac_i/plots/"
if isdir(dlac_plots_dir)
    println("‚úÖ DLAC-i All Generators equilibrium plots available")
    
    # Check for both sorted and unsorted versions
    sorted_exists = isfile(joinpath(dlac_plots_dir, "equilibrium_log_sorted_max_pmr.png"))
    unsorted_exists = isfile(joinpath(dlac_plots_dir, "equilibrium_log_max_pmr.png"))
    
    if sorted_exists
        println("  Using sorted plots")
    elseif unsorted_exists
        println("  Using unsorted plots (consider running sort in diagnostic_analysis.qmd)")
    end
else
    println("‚ùå DLAC-i All Generators equilibrium plots not found")
end
```

**Maximum PMR Evolution:**

```{julia}
#| echo: false
# Try sorted version first, fall back to unsorted
sorted_plot = "results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_max_pmr.png"
unsorted_plot = "results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_max_pmr.png"

if isfile(sorted_plot)
    println("Displaying sorted PMR plot")
elseif isfile(unsorted_plot)
    println("Displaying unsorted PMR plot")
else
    println("No PMR plot found")
end
```

<img src="results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_max_pmr.png" alt="DLAC-i All Generators - Max PMR" width="800"/>

**All PMRs Evolution:** <img src="results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_all_pmrs.png" alt="DLAC-i All Generators - All PMRs" width="800"/>

**Capacity Evolution:** <img src="results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_capacity_evolution.png" alt="DLAC-i All Generators - Capacity Evolution" width="800"/>

**Cost Evolution:** <img src="results/validation_dlac_all_generators/equilibrium/dlac_i/plots/equilibrium_log_sorted_cost_evolution.png" alt="DLAC-i All Generators - Cost Evolution" width="800"/>

## Part 4: Zoomed Plots (Last 20 Iterations)

This section shows the detailed convergence behavior in the final iterations for each validation test.

### Find and Display All Zoomed Plots

```{julia}
using Glob

project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"

println("Searching for zoomed equilibrium plots...")
println("="^60)

# Define validation directories
validation_dirs = [
    ("PF All Generators", "results/validation_pf_all_generators/equilibrium/perfectforesight/plots/"),
    ("PF Gas Only", "results/validation_pf_gas_only/equilibrium/perfectforesight/plots/"),
    ("DLAC-i All Generators", "results/validation_dlac_all_generators/equilibrium/dlac_i/plots/")
]

for (name, rel_dir) in validation_dirs
    plots_dir = joinpath(project_dir, rel_dir)
    println("\n$name:")
    
    if isdir(plots_dir)
        # Find all zoom files
        zoom_pattern = joinpath(plots_dir, "*_zoom_*.png")
        zoom_files = glob(zoom_pattern)
        
        if !isempty(zoom_files)
            println("  ‚úÖ Found $(length(zoom_files)) zoomed plots")
            
            # Group by plot type
            plot_types = ["max_pmr", "all_pmrs", "capacity_evolution", "cost_evolution"]
            
            for plot_type in plot_types
                matching = filter(f -> contains(basename(f), plot_type), zoom_files)
                if !isempty(matching)
                    file_path = matching[1]
                    rel_path = replace(file_path, project_dir => "")
                    println("    üìä $plot_type: $(basename(file_path))")
                end
            end
        else
            println("  ‚ùå No zoomed plots found")
        end
    else
        println("  ‚ùå Directory not found")
    end
end
```

### Zoomed Plot Display

After running the plot generation section above, the zoomed plots will be available. Here we dynamically display them:

```{julia}
# Display all available zoomed plots
for (name, rel_dir) in validation_dirs
    plots_dir = joinpath(project_dir, rel_dir)
    
    if isdir(plots_dir)
        zoom_pattern = joinpath(plots_dir, "*_zoom_*.png")
        zoom_files = glob(zoom_pattern)
        
        if !isempty(zoom_files)
            println("\n" * "="^50)
            println("$name - ZOOMED PLOTS (Last 20 Iterations)")
            println("="^50)
            
            # Display each plot type
            plot_types = [
                ("max_pmr", "Maximum PMR Evolution"),
                ("all_pmrs", "All PMRs Evolution"), 
                ("capacity_evolution", "Capacity Evolution"),
                ("cost_evolution", "Cost Evolution")
            ]
            
            for (plot_key, plot_title) in plot_types
                matching = filter(f -> contains(basename(f), plot_key), zoom_files)
                if !isempty(matching)
                    file_path = matching[1]
                    println("\n**$plot_title (Zoomed):**")
                    println("![$(name) - $plot_title Zoom]($file_path)")
                end
            end
        end
    end
end
```

## Part 5: Iteration Comparison Plots

This section displays detailed comparison plots between specific iterations.

### Check Available Comparison Plots

```{julia}
project_dir = "/Users/shxryz/Desktop/Research Stuff/ToySystemEquilibrium"
comparison_dir = joinpath(project_dir, "results/comparison")

println("Checking for iteration comparison plots...")
println("="^50)

if isdir(comparison_dir)
    comparison_files = filter(f -> endswith(f, ".png"), readdir(comparison_dir))
    
    if !isempty(comparison_files)
        println("‚úÖ Found $(length(comparison_files)) comparison plot files:")
        for file in comparison_files
            println("  üìä $file")
        end
    else
        println("‚ùå No comparison plots found")
        println("   Run compare_iterations.jl to generate comparison plots")
    end
else
    println("‚ùå Comparison directory not found: $comparison_dir")
    println("   Run compare_iterations.jl to generate comparison plots")
end
```

### Iteration 976 vs 977 Comparison (PF All Generators)

```{julia}
#| echo: false
comparison_976_977 = joinpath(project_dir, "results/comparison/price_comparison_976_vs_977.png")
if isfile(comparison_976_977)
    println("‚úÖ Iteration 976 vs 977 comparison available")
else
    println("‚ùå Iteration 976 vs 977 comparison not found")
end
```

**Combined Price Comparison (976 vs 977):** <img src="results/comparison/price_comparison_976_vs_977.png" alt="Price Comparison 976 vs 977" width="1000"/>

**Price Time Series Comparison:** <img src="results/comparison/price_timeseries_976_vs_977.png" alt="Price Time Series 976 vs 977" width="1000"/>

**Price Difference Analysis:** <img src="results/comparison/price_difference_976_vs_977.png" alt="Price Difference 976 vs 977" width="1000"/>

**Price Duration Curves:** <img src="results/comparison/price_duration_976_vs_977.png" alt="Price Duration 976 vs 977" width="1000"/>

**Price Statistics Comparison:** <img src="results/comparison/price_statistics_976_vs_977.png" alt="Price Statistics 976 vs 977" width="1000"/>

### Iteration 977 vs 978 Comparison (PF All Generators)

```{julia}
#| echo: false
comparison_977_978 = joinpath(project_dir, "results/comparison/price_comparison_977_vs_978.png")
if isfile(comparison_977_978)
    println("‚úÖ Iteration 977 vs 978 comparison available")
else
    println("‚ùå Iteration 977 vs 978 comparison not found")
end
```

**Combined Price Comparison (977 vs 978):** <img src="results/comparison/price_comparison_977_vs_978.png" alt="Price Comparison 977 vs 978" width="1000"/>

**Price Time Series Comparison:** <img src="results/comparison/price_timeseries_977_vs_978.png" alt="Price Time Series 977 vs 978" width="1000"/>

**Price Difference Analysis:** <img src="results/comparison/price_difference_977_vs_978.png" alt="Price Difference 977 vs 978" width="1000"/>

**Price Duration Curves:** <img src="results/comparison/price_duration_977_vs_978.png" alt="Price Duration 977 vs 978" width="1000"/>

**Price Statistics Comparison:** <img src="results/comparison/price_statistics_977_vs_978.png" alt="Price Statistics 977 vs 978" width="1000"/>

### Iteration 967 vs 968 Comparison (PF Gas Only)

```{julia}
#| echo: false
comparison_967_968 = joinpath(project_dir, "results/comparison/price_comparison_967_vs_968.png")
if isfile(comparison_967_968)
    println("‚úÖ Iteration 967 vs 968 comparison available")
else
    println("‚ùå Iteration 967 vs 968 comparison not found")
end
```

**Combined Price Comparison (967 vs 968):** <img src="results/comparison/price_comparison_967_vs_968.png" alt="Price Comparison 967 vs 968" width="1000"/>

**Price Time Series Comparison:** <img src="results/comparison/price_timeseries_967_vs_968.png" alt="Price Time Series 967 vs 968" width="1000"/>

**Price Difference Analysis:** <img src="results/comparison/price_difference_967_vs_968.png" alt="Price Difference 967 vs 968" width="1000"/>

**Price Duration Curves:** <img src="results/comparison/price_duration_967_vs_968.png" alt="Price Duration 967 vs 968" width="1000"/>

**Price Statistics Comparison:** <img src="results/comparison/price_statistics_967_vs_968.png" alt="Price Statistics 967 vs 968" width="1000"/>

### Display All Available Comparison Plots

```{julia}
# Dynamically display any other comparison plots found
if isdir(comparison_dir)
    all_comparison_files = filter(f -> endswith(f, ".png"), readdir(comparison_dir))
    
    # Group by comparison pair
    comparison_pairs = Dict()
    for file in all_comparison_files
        # Extract iteration numbers from filename
        if occursin(r"(\d+)_vs_(\d+)", file)
            match_result = match(r"(\d+)_vs_(\d+)", file)
            if match_result !== nothing
                pair_key = "$(match_result.captures[1])_vs_$(match_result.captures[2])"
                if !haskey(comparison_pairs, pair_key)
                    comparison_pairs[pair_key] = []
                end
                push!(comparison_pairs[pair_key], file)
            end
        end
    end
    
    if !isempty(comparison_pairs)
        println("\nAll available iteration comparisons:")
        for (pair, files) in comparison_pairs
            println("  üìä Iterations $pair: $(length(files)) plots")
        end
    end
end
```

## Part 6: Quick Summary

### Results Summary

```{julia}
println("ToySystemEquilibrium Plot Viewer Summary")
println("="^50)

# Count available plots
main_plot_count = count(isfile, [
    "results/plots/price_duration_curves.png",
    "results/plots/generation_stacks.png", 
    "results/plots/battery_operations.png",
    "results/plots/battery_soc_comparison.png",
    "results/plots/system_profiles.png",
    "results/plots/capacity_comparison.png",
    "results/plots/comprehensive_price_analysis.png"
])

println("Main System Plots: $main_plot_count/7 available")

# Count equilibrium plots
eq_dirs = [
    "results/validation_pf_all_generators/equilibrium/perfectforesight/plots/",
    "results/validation_pf_gas_only/equilibrium/perfectforesight/plots/",
    "results/validation_dlac_all_generators/equilibrium/dlac_i/plots/"
]

eq_available = count(isdir, eq_dirs)
println("Equilibrium Validation Sets: $eq_available/3 available")

if eq_available == 3
    println("\n‚úÖ All equilibrium validation results available")
elseif eq_available > 0
    println("\n‚ö†Ô∏è  Some equilibrium validation results missing")
    println("   Run diagnostic_analysis.qmd to generate missing plots")
else
    println("\n‚ùå No equilibrium validation results found")
    println("   Run diagnostic_analysis.qmd first")
end

println("\nTo generate missing plots:")
println("  1. Run diagnostic_analysis.qmd")
println("  2. Refresh this plot viewer")
```

### File Locations

```{julia}
println("Generated file locations:")
println("\nMain Results:")
println("  - results/capacity_expansion_*.csv")
println("  - results/perfect_foresight_*.csv") 
println("  - results/dlac_i_*.csv")
println("  - results/*_comparison.csv")

println("\nMain System Plots:")
println("  - results/plots/")

println("\nEquilibrium Validation Plots:")
println("  - results/validation_pf_all_generators/equilibrium/perfectforesight/plots/")
println("  - results/validation_pf_gas_only/equilibrium/perfectforesight/plots/")
println("  - results/validation_dlac_all_generators/equilibrium/dlac_i/plots/")

println("\nFor detailed analysis, see diagnostic_analysis.qmd")
```